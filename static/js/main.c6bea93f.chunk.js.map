{"version":3,"sources":["components/expense/expense.js","components/expense-table/expense-table.js","components/profit-rollup/profit-rollup.js","services/storage.js","App.js","reportWebVitals.js","index.js"],"names":["OPTIONS","value","label","AddExpense","props","useState","amount","setAmount","type","setType","className","direction","align","onChange","e","size","min","v","map","opt","Option","onClick","addExpense","columns","title","dataIndex","key","ExpenseTable","style","width","marginTop","pagination","dataSource","moneyItems","mi","i","ProfitRollup","startDate","length","date","profit","reduce","acc","item","C","NegativeProfit","PositiveProfit","Date","toLocaleDateString","navigator","language","year","month","day","StorageService","LOCAL_STORAGE_KEY","items","localStorage","getItem","this","JSON","parse","state","get","setItem","stringify","MONEY_ITEMS_KEY","START_DATE_KEY","App","storedState","setMoneyItems","expense","set","newState","handleNewExpense","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c6bea93f.chunk.js","sourcesContent":["import { InputNumber, Space, Select, Button } from \"antd\";\nimport { useState } from \"react\";\n\nimport \"./expense.scss\";\n\nconst OPTIONS = [\n  {\n    value: \"profit\",\n    label: \"Profit\",\n  },\n  { value: \"expense\", label: \"Expense\" },\n];\n\nexport const AddExpense = (props) => {\n  const [amount, setAmount] = useState(0);\n  const [type, setType] = useState(OPTIONS[0].value);\n\n  const reset = () => {\n    setAmount(0);\n    setType(OPTIONS[0].value);\n  };\n\n  const handleSubmit = () => {\n    reset();\n    props.addExpense && props.addExpense({ amount, type });\n  };\n\n  return (\n    <Space className=\"sp-add-expense\" direction=\"vertical\" align=\"center\">\n      <InputNumber\n        className=\"sp-add-expense__field\"\n        value={amount}\n        onChange={(e) => setAmount(e)}\n        size=\"large\"\n        min={0}\n      />\n\n      <Select\n        className=\"sp-add-expense__field\"\n        value={type}\n        size=\"large\"\n        onChange={(v) => setType(v)}\n      >\n        {OPTIONS.map((opt) => (\n          <Select.Option key={opt.label} value={opt.value}>\n            {opt.label}\n          </Select.Option>\n        ))}\n      </Select>\n      <Button type=\"primary\" onClick={handleSubmit}>\n        Add\n      </Button>\n    </Space>\n  );\n};\n","import { Table } from \"antd\";\n\nconst columns = [\n  {\n    title: \"Amount\",\n    dataIndex: \"amount\",\n    key: \"amount\",\n  },\n  {\n    title: \"Type\",\n    dataIndex: \"type\",\n    key: \"type\",\n  },\n];\n\nexport const ExpenseTable = (props) => {\n  return (\n    <Table\n      style={{ width: \"100%\", marginTop: \"20px\" }}\n      columns={columns}\n      pagination={false}\n      dataSource={props.moneyItems.map((mi, i) => ({ ...mi, key: i }))}\n    ></Table>\n  );\n};\n","const formatDate = (date) => {\n  const options = { year: \"numeric\", month: \"long\", day: \"numeric\" };\n\n  return date.toLocaleDateString(navigator.language, options);\n};\nexport const ProfitRollup = ({ moneyItems, startDate }) => {\n  if (!moneyItems.length) {\n    return null;\n  }\n\n  const profit = moneyItems.reduce((acc, item) => {\n    if (item.type === \"expense\") {\n      acc -= item.amount;\n    } else {\n      acc += item.amount;\n    }\n\n    return acc;\n  }, 0);\n\n  const C = profit < 0 ? NegativeProfit : PositiveProfit;\n\n  return (\n    <div>\n      Since {formatDate(new Date(startDate))}\n      <C amount={profit} />\n    </div>\n  );\n};\n\nconst NegativeProfit = ({ amount }) => <span> you have lost: {amount}</span>;\nconst PositiveProfit = ({ amount }) => <span> you have made: {amount}</span>;\n","// API to store app data\nclass storageService {\n  LOCAL_STORAGE_KEY = \"sf-moneyItems\";\n\n  get() {\n    const items = localStorage.getItem(this.LOCAL_STORAGE_KEY);\n\n    if (!items) {\n      return {};\n    }\n\n    return JSON.parse(items);\n  }\n\n  set(key, value) {\n    const state = { ...this.get(), [key]: value };\n\n    localStorage.setItem(this.LOCAL_STORAGE_KEY, JSON.stringify(state));\n  }\n}\n\nexport const StorageService = new storageService();\n","import { useState } from \"react\";\nimport \"./App.scss\";\n\nimport { AddExpense } from \"./components/expense\";\nimport { ExpenseTable } from \"./components/expense-table\";\nimport { ProfitRollup } from \"./components/profit-rollup/profit-rollup\";\nimport { StorageService } from \"./services/storage\";\n\nconst MONEY_ITEMS_KEY = \"moneyItems\";\nconst START_DATE_KEY = \"startDate\";\n\nfunction App() {\n  const storedState = StorageService.get();\n\n  const [moneyItems, setMoneyItems] = useState(\n    storedState[MONEY_ITEMS_KEY] || []\n  );\n\n  const handleNewExpense = (expense) => {\n    if (moneyItems.length === 0) {\n      // Persist the time of the first expense\n      StorageService.set(START_DATE_KEY, new Date());\n    }\n\n    // Newest items go first\n    const newState = [expense, ...moneyItems];\n\n    StorageService.set(MONEY_ITEMS_KEY, newState);\n    setMoneyItems(newState);\n  };\n\n  return (\n    <div className=\"sp-main\">\n      <h2>Simple Finance</h2>\n      <AddExpense\n        addExpense={(expense) => handleNewExpense(expense)}\n      ></AddExpense>\n\n      <ProfitRollup\n        moneyItems={moneyItems}\n        startDate={storedState[START_DATE_KEY]}\n      ></ProfitRollup>\n      <ExpenseTable moneyItems={moneyItems}></ExpenseTable>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}